<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0"
     xmlns:rng="http://relaxng.org/ns/structure/1.0"
     xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <teiHeader>
    <fileDesc>
      <titleStmt>
	<title>Proposal for link data block &amp; standoff annotations in TEI</title>
	<author xml:id="ps">
	  <persName ref="https://github.com/peterstadler">
	    <forename>Peter</forename>
	    <surname>Stadler</surname>
	  </persName>
	</author>
	<author xml:id="lr">
	  <persName ref="https://github.com/laurentromary">
	    <forename>Laurent</forename>
	    <surname>Romary</surname>
	  </persName>
	</author>
	<respStmt xml:id="pb">
	  <resp>contributor</resp>
	  <persName ref="https://github.com/bansp">
	    <forename>Piotr</forename>
	    <surname>Banski</surname>
	  </persName>
	</respStmt>
	<author xml:id="sb">
	  <persName ref="https://github.com/sydb">
	    <forename>Syd</forename>
	    <surname>Bauman</surname>
	  </persName>
	</author>
	<respStmt xml:id="sm">
	  <resp>contributor</resp>
	  <persName ref="https://github.com/simonmeoni">
	    <forename>Simon</forename>
	    <surname>Meoni</surname>
	  </persName>
	</respStmt>
      </titleStmt>
      <publicationStmt>
	<authority>Berlin task force “standoff”</authority>
	<availability>
	  <licence>CC+BY and BSD-2 licences</licence>
	</availability>
      </publicationStmt>
      <sourceDesc>
	<p>Born digital.</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change when="2018-11-15" who="#sb">
	<list>
	  <item>Move <gi>schemaSpec</gi> into <gi>back</gi>, thus
	  giving us a place to put prose (in <gi>body</gi>)</item>
	  <item>Add start of discussion in <gi>body</gi></item>
	  <item>Added <gi>prop:extraTextual</gi>,
	  <gi>prop:acorstic</gi>, and <gi>prop:anagram</gi>.</item>
	</list>
      </change>
      <change when="2018-10-30" who="#sb">Change <gi>prop:standOff</gi> to <gi>prop:ldb</gi>, and return <gi>prop:listAnnotation</gi>; add <gi>castList</gi> to <name>model.annotation</name> (and thus to <gi>ldb</gi>)</change>
      <change when="2018-10-28" who="#sb">Change overall structure, eliminating <gi>teiCorpus</gi> and allowing <gi>TEI</gi> to nest, thus removing need for crazy <gi>teiHeader</gi> inside <gi>prop:standOff</gi>. This also obviates the need for <gi>prop:listAnnotation</gi> inside <gi>prop:standOff</gi>, putting its content directly in <gi>standOff</gi>.</change>
      <change when="2017-03-16" who="#pb">purified this ODD</change>
      <change when="2017-03-15" who="#pb">combined two elementSpec for "standoff" into one, removed the macroSpec redeclaration (it had no effect on the compiled ODD)</change>
      <change when="2015-03-14" who="#ps">modification and extension (changes since that date not logged here, see the <ref target="https://github.com/laurentromary/stdfSpec/commits/master"
      >repository history</ref>)</change>
      <change when="2014-12-02" who="#lr">initial version created (changes since that date not logged here, see the <ref target="https://github.com/laurentromary/stdfSpec/commits/master"
      >repository history</ref>)</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <front>
      <head>Stand-off and Supratextual Features</head>
      <div>
	<head>Organization of this document</head>
	<p>This ODD document contains some introductory material,
	including a discussion of the desires and goals that led to
	this proposal in the front matter. The main body is divided
	into two main sections: discussion intended for the reader of
	this ODD who is considering whether or not this is a good
	change for TEI (i.e., mostly for TEI Council members, but also
	for other interested parties and posterity), and discussion
	that is intended to be cut-and-pasted into the TEI Guidelines.
	The back matter contains the schema specification itself.</p>
      </div>
      <div>
	<head>Problems Being Addressed Herein</head>
	<p></p>
      </div>
      <div>
	<head>History</head>
	<p></p>
      </div>
    </front>
    <body>
      <div>
	<head>Part I: Discussion</head>
	<div>
	  <head>Main Sticking Point</head>
	  <p>At Council’s face-to-face meeting in Feb 2018 in Cologne
	  (<foreign xml:lang="de">Köln</foreign>), SB, HC, and MT were
	  assigned as a sub-group to read Laurent’s proposal and
	  develop a counter proposal. The main sticking point was that
	  Council objected (quite strongly) to the idea of having
	  <gi>teiHeader</gi> be a child of the new <gi>standOff</gi>
	  (herein called <gi>ldb</gi>). Furthermore, Council wanted to
	  explore the relationship between the stand-off annotations
	  being recommended and the <ref
	  target="http://www.openannotation.org/spec/core/">OADM</ref>.</p>
	</div>
	<div xml:id="ODTS">
	  <head>On Default Text Structure</head>
	  <p>This section describes the solution to the request that
	  <gi>teiHeader</gi> be a child of <gi>standOff</gi>. The
	  basic gist of the solution is to allow <gi>TEI</gi> to nest
	  within <gi>TEI</gi> instead. The result is that a
	  <gi>teiHeader</gi> can be closely bound to the
	  <gi>ldb</gi> by being a child of the same <gi>TEI</gi>,
	  whether the <gi>ldb</gi> is used inside an existing TEI
	  structure or free-standing. The (desirable) side-effect is
	  that <gi>teiCorpus</gi> is no longer needed.</p>

	  <p>The current structure of a TEI document is as follows:
	  <eg xml:space="preserve">  start = TEI | teiCorpus
  TEI = teiHeader, model.resourceLike+
  teiCorpus = teiHeader, ( model.resourceLike*, ( TEI | teiCorpus )* )
  model.resourceLike = \text | facsimile | fsdDecl | sourceDoc</eg>
  <note>The content model of <gi>teiCorpus</gi> in this example is a
  simplification of the actual content model, which requires that you
  have at least one child of <gi>teiCorpus</gi>: either one element
  from model.resourceLike, or one of either <gi>TEI</gi> or
  <gi>teiCorpus</gi>.</note></p>
  <p>In his <ref
  target="https://github.com/laurentromary/stdfSpec">original
  stand-off proposal</ref>, @laurentromary asked for exactly the same
  thing, except with one significant change:
  <list>
    <item>add <gi>ldb</gi> to <name type="class">model.resourceLike</name></item>
  </list>
  HOWEVER, he also asked that the <gi>ldb</gi> element have
  <gi>teiHeader</gi> as a child:

  <eg xml:space="preserve">  ldb = teiHeader?, model.resourceLike*, listAnnotation*</eg>

  This is because he wants the document used for stand off annotations
  to also stand on its own. We (Council) really really did not like
  the idea of allowing <gi>teiHeader</gi> (and other <name
  type="class">model.resourceLike</name> elements) as a child (or
  children) of <gi>ldb</gi>. Thus my proposed new structure for a
  TEI document is:

  <eg xml:space="preserve">  start = TEI
  TEI = teiHeader, ( model.resourceLike*, TEI* )
  model.resourceLike = \text | facsimile | fsdDecl | ldb | sourceDoc</eg>

  <note>The content model of <gi>TEI</gi> in this example is a
  simplification of the actual proposed content model, which would
  require that you have at least one child of <gi>TEI</gi>: either one
  element from <name type="class">model.resourceLike</name> or a
  <gi>TEI</gi>.</note> This allows an <gi>ldb</gi> to
  be associated very closely with a <gi>teiHeader</gi> (by being
  wrapped in a <gi>TEI</gi>) whether it is a document of its own or a
  child of another <gi>TEI</gi> document.</p>
  <p>That said, I could understand the argument that <said>a
  <gi>TEI</gi> is just a resource, albeit one with metadata
  associated; thus <gi>TEI</gi> should just be in <name
  type="class">model.resourceLike</name></said>. This makes for very
  simple content models:

  <eg xml:space="preserve">  start = TEI
  TEI = teiHeader, model.resourceLike+
  model.resourceLike = TEI | \text | facsimile | fsdDecl | ldb | sourceDoc</eg>

  That’s good, but it also allows some new weird things (in addition
  to the weird things we already allow but probably shouldn’t), in
  particular <gi>TEI</gi> elements in between other resource thingies:

  <egXML xmlns="http://www.tei-c.org/ns/Examples"><TEI>
  <teiHeader><!-- ... --></teiHeader>
  <facsimile><!-- ... --></facsimile>
   <TEI>
     <teiHeader><!-- ... --></teiHeader>
    <sourceDoc><!-- ... --></sourceDoc>
    <ldb><!-- ... --></ldb>
  </TEI>
  <fsdDecl><!-- ... --></fsdDecl>
  <text><!-- ... --></text>
  <text><!-- ... --></text>
  <ldb><!-- ... --></ldb>
  <TEI>
    <teiHeader><!-- ... --></teiHeader>
    <text><!-- ... --></text>
  </TEI>
</TEI></egXML>
	  </p>
	  <p>While this solution has significant
	  backwards-compatability implications (we would have to leave
	  <gi>teiCorpus</gi> as deprecated for a long time), it would
	  seem to both solve the linguists desire to associate header
	  information closely with annotations, and to allow a
	  significantly simpler overall model of TEI documents, while
	  still allowing for representation of complex structures.</p>
	</div>
      </div>
      <div>
	<head>Part II: <title>Guidelines</title> Prose</head>
	<div>
	  <head>For somewhere in #DRSP:</head>
	  <p>In the event there is a speech that is assigned to a
	  character that is not listed in the source cast list, a
	  <gi>castList</gi> may be encoded inside the <gi>ldb</gi>
	  element to provide an element to which the <att>who</att> of
	  <gi>sp</gi> may point.</p>
	</div>
	<div>
	  <head>For somewhere in DS:</head>
	  <p>The <gi>TEI</gi> element is used to group together
	  metadata about an encoded resource (in <gi>teiHeader</gi>)
	  with an encoded resource (e.g., a logical transcription of a
	  source document in a <gi>text</gi> element; a diplomatic
	  transcription of a source document in a <gi>sourceDoc</gi>
	  element; or an encoded representation of a text bearing
	  object as images in a <gi>facsimile</gi>).</p>
	  <p>In a case in which more than one encoded version of the
	  same source document share the same metadata, they may be
	  grouped together in a <gi>TEI</gi> element following a
	  single <gi>teiHeader</gi>.</p>
	</div>
	<div>
	  <head>For somewhere in SO(?):</head>
	    <p>The <gi>ldb</gi> or <soCalled>linked data
	    block</soCalled> element is a catch-all element intended
	    for holding content that is neither transcribed from the
	    source document, nor strictly speaking metadata about said
	    document. It may also be used to hold transcribed text
	    that does not, for some reason, fit into the encoding
	    model being used.</p>
	    <p>Examples of the former include contextual information
	    about named entities (typically encoded using
	    <gi>listBibl</gi>, <gi>listOrg</gi>, <?TEI LR or HC:
	    <gi>listNym</gi>, too?><gi>listPerson</gi>, or
	    <gi>listPlace</gi>), collections of <gi>alt</gi> elements
	    for encoding ambiguity of reference, and an encoded
	    <gi>castList</gi> used to record information about
	    speaking characters in a drama who were not mentioned in
	    the source cast list.</p>
	    <p>Examples of the latter include encoding source
	    authorial footnotes in the <gi>ldb</gi> in order to more
	    easily represent source pages when a footnote runs across
	    a page break, or to encode words that appear in the source
	    text as part of an acrostic (using <gi>acrostic</gi> in
	    <gi>extraTextual</gi>).</p>
	</div>
      </div>
    </body>
    <back>
      <!-- http://wiki.tei-c.org/index.php/Proposal_for_@selector_attribute_on_rendition -->
      <schemaSpec ident="standoff-proposal" start="TEI">
	<desc>Proposed changes to TEI to incorporate stand-off markup
	and other supratextual features</desc>
	<moduleRef key="tei"/>
	<moduleRef key="core"/>
	<moduleRef key="analysis"/>
	<moduleRef key="certainty"/>
	<moduleRef key="corpus"/>
	<moduleRef key="dictionaries"/>
	<moduleRef key="drama"/>
	<moduleRef key="figures"/>
	<moduleRef key="gaiji"/>
	<moduleRef key="header"/>
	<moduleRef key="iso-fs"/>
	<moduleRef key="linking"/>
	<moduleRef key="msdescription"/>
	<moduleRef key="namesdates"/>
	<moduleRef key="nets"/>
	<moduleRef key="spoken"/>
	<moduleRef key="textcrit"/>
	<moduleRef key="textstructure"/>
	<moduleRef key="transcr"/>
	<moduleRef key="verse"/>
	<moduleRef key="tagdocs"/>

	<!-- Remove <teiCorpus> -->
	<elementSpec ident="teiCorpus" mode="delete" module="textstructure"/>

	<!-- Alter <TEI> content to allow corpora -->
	<elementSpec module="textstructure" ident="TEI" mode="change">
	  <desc versionDate="2018-10-28" xml:lang="en">contains a
	  single TEI-conformant document, combining a single TEI
	  header with either one or more members of the <ident
	  type="class">model.resourceLike</ident> class, a sequence of
	  one or more <gi>TEI</gi> elements, or both.</desc>
	  <classes>
	    <memberOf key="att.global"/>
	    <memberOf key="att.typed"/>
	  </classes>
	  <content>
	    <sequence>
	      <elementRef key="teiHeader"/>
	      <alternate>
		<sequence>
		  <classRef key="model.resourceLike" minOccurs="1" maxOccurs="unbounded"/>
		  <elementRef key="TEI" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
		<elementRef key="TEI" minOccurs="1" maxOccurs="unbounded"/>
	      </alternate>
	    </sequence>
	  </content>
	</elementSpec>

	<!-- Create new "standOff" module for the new elements
	     introduced here: <ldb>, <listAnnotation>, <extraTextual>,
	     <acrostic>, and <anagram>. -->
	<moduleSpec ident="standOff">
	  <desc>Elements to collect stand-off annotations and
	  contextual information in a TEI document</desc>
	</moduleSpec>

	<!--  The entry point to stand-off annotations, as member of model.resourceLike-->
	<elementSpec ident="ldb" mode="add" module="standOff"
		     ns="http://www.tei-c.org/proposal/standoff/ns">
	  <gloss versionDate="2018-10-30">linked data block</gloss>
	  <desc>Container element for linked data, contextual
	  information, and stand-off annotations embedded in a TEI
	  document</desc>
	  <classes>
	    <memberOf key="model.resourceLike"/>
	    <memberOf key="att.global"/>
	    <memberOf key="att.typed"/>
	    <memberOf key="att.declaring"/>
	  </classes>
	  <content>
	    <classRef key="model.annotation" minOccurs="1" maxOccurs="unbounded"/>
	  </content>
	  <constraintSpec ident="proposalNS" scheme="schematron" mode="add">
	    <constraint>
	      <sch:ns prefix="prop" uri="http://www.tei-c.org/proposal/standoff/ns"/>
	    </constraint>
	  </constraintSpec>
	  <constraintSpec ident="nestedLDBshouldBtyped" scheme="schematron" mode="add">
	    <constraint>
	      <sch:assert test="@type or not(ancestor::prop:ldb)">This <sch:name/> element must have a @type attribute, since it is nested inside an <sch:name/></sch:assert>
	    </constraint>
	  </constraintSpec>
	  <remarks>
	  </remarks>
	</elementSpec>

	<!-- New element for holding text not actually present in source -->
	<elementSpec ident="extraTextual" mode="add" ns="http://www.tei-c.org/proposal/standoff/ns" module="standOff">
	  <desc>Container element for extra textual phenomena.</desc>
	  <classes>
	    <memberOf key="att.global"/>
	    <memberOf key="model.annotation"/>
	    <memberOf key="att.typed"/>
	  </classes>
	  <content>
	    <alternate minOccurs="1" maxOccurs="unbounded">
	      <elementRef key="acrostic"/>
	      <elementRef key="anagram"/>
	      <elementRef key="et"/>
	      <?TEI <et>, above, is currently undefined. I'm not sure whether I intended
		it to be just a placeholder for other extra textual stuff, or an actual
		generic extra textual element. Doesn't matter what I intended, really, so
		much as what would be better. Any thoughts? -- Syd ?>
	    </alternate>
	  </content>
	  <!-- Need examples here -->
	</elementSpec>
        <elementSpec ident="acrostic" mode="add" ns="http://www.tei-c.org/proposal/standoff/ns" module="standOff">
          <desc>a derived element that contains the word or phrase
          (including any appropriate phrase-level encoding like
          <gi>persName</gi>) that are spelled by the initial letters
          of a passage (e.g., the first letter of each line of a
          stanza or poem).</desc>
          <classes mode="replace">
            <memberOf key="att.global"/>
	    <memberOf key="att.scoping"/>
          </classes>
          <content>
            <macroRef key="macro.phraseSeq"/>
          </content>
	  <constraintSpec scheme="schematron" ident="acrostic_attrs">
	    <constraint>
	      <sch:report test="(@target|@match) and @components">Either @target, @target and @match, or @components should be used to indicate the acrostic, not both @target and @components</sch:report>
	      <sch:report test="@match[not(substring(normalize-space(.),1,1) eq '/')] and not(@target)">The @target attribute must be specified to indicate the context for @match</sch:report>
	    </constraint>
	  </constraintSpec>
          <attList>
            <attDef ident="target" mode="change">
              <desc>points to the parent element (e.g., an
              <gi>lg</gi>) that contains the elements of which the
              first letter of each make up the acrostic.</desc>
              <datatype minOccurs="1" maxOccurs="1"><dataRef key="teidata.pointer"/></datatype>
            </attDef>
            <attDef ident="components" usage="opt" mode="add">
              <desc>points to a sequence of individual elements; when
              taken in the order specified, the first letter of each
              element that has textual content or the first letter
              immediately following each that is empty, make up the
              acrostic.</desc>
              <datatype minOccurs="2" maxOccurs="unbounded">
		<dataRef key="teidata.pointer"/>
	      </datatype>
            </attDef>
          </attList>
	  <exemplum>
	    <egXML xmlns="http://www.tei-c.org/ns/Examples" source="#NONE">
	      <ldb>
		<extraTextual>
		  <acrostic target="#cptMarvel">
		    <said>Shazam!</said>
		  </acrostic>
		</extraTextual>
	      </ldb>
	      <!-- ... -->
	      <div type="tinyExample">
		<head>Billy Batson’s List</head>
		<p>If you came of age in 1940s <placeName
		ref="l:nyc">New York City</placeName>, you probably
		knew this list better than the list of <placeName
		ref="l:nyc">NYC</placeName> Borough Presidents.</p>
		<list xml:id="cptMarvel">
		  <item>Solomon</item>
		  <item>Hercules</item>
		  <item>Atlas</item>
		  <item>Zeus</item>
		  <item>Achilles</item>
		  <item>Mercury</item>
		</list>
	      </div>
	    </egXML>
	  </exemplum>
        </elementSpec>
        <elementSpec ident="anagram" mode="add" ns="http://www.tei-c.org/proposal/standoff/ns" module="standOff">
          <desc>indicates that two or more strings (either words or
          phrases) are anagrams of each other</desc>
          <classes mode="replace">
            <memberOf key="att.global"/>
            <memberOf key="att.pointing"/>
          </classes>
          <content>
	    <macroRef key="macro.phraseSeq"/>
	  </content>
          <attList>
            <attDef ident="target" usage="req" mode="change">
	      <desc>points to an element of which the current element
	      is (roughly) an anagram, or points to 2 or more elements
	      whose content are (roughly) anagrams of each
	      other</desc>
              <datatype minOccurs="1" maxOccurs="unbounded">
		<dataRef key="teidata.pointer"/>
	      </datatype>
	      <constraintSpec scheme="schematron" ident="one_ptr_iff_content">
		<constraint>
		  <sch:rule context="tei:anagram[normalize-space(.) eq '']">
		    <sch:let name="targets" value="tokenize( normalize-space( @target ),'&#x20;')"/>
		    <sch:assert test="count( $targets ) gt 1">An empty ＜anagram＞ element should point to 2 or more targets</sch:assert>
		  </sch:rule>
		  <sch:rule context="tei:anagram[normalize-space(.) ne '']">
		    <sch:let name="targets" value="tokenize( normalize-space( @target ),'&#x20;')"/>
		    <sch:assert test="count( $targets ) eq 1">An ＜anagram＞ element that contains an anagram should point to only 1 target</sch:assert>
		  </sch:rule>
		</constraint>
	      </constraintSpec>
	      <remarks>
                <p>The elements referred to should be intentional, if
                not exact, anagrams of one another. If one of the
                textual objects that is an anagram is made of several
                XML elements, then the <att>target</att> should point
                to either <emph>the first</emph> XML element (in
                document order) if they are connected with
                <att>part</att> or <att>next</att> &amp;
                <att>prev</att>; or to a <gi>link</gi> or
                <gi>join</gi>. The point is, the <att>target</att>
                should not point to each XML element that is a
                component of a single anagram.</p>
              </remarks>
            </attDef>
          </attList>
	  <remarks>
	    <p>The <gi>anagram</gi> element may contain content to
	    indicate the re-arranged order of the letters in the
	    source, for use when the source does not indicate the
	    re-arrangement itself. E.g., if the source says <quote>He
	    hired a new <soCalled>crap built on lies</soCalled>
	    officer</quote>, but does not explain what <quote>crap
	    built on lies</quote> is an anagrom <emph>for</emph>, we
	    might encode
	    <egXML xmlns="http://www.tei-c.org/ns/Examples">
	      <anagram target="#cbol">public relations</anagram>
	      &lt;!-- ... -->
	      <lb/>He hired a new <soCalled xml:id="cbol">crap built
	      on lies</soCalled> officer
	    </egXML>
	    </p>
	  </remarks>
        </elementSpec>

	<!-- The main container for linguistic stand-off or OAM type annotations -->
	<elementSpec ident="listAnnotation" mode="add" ns="http://www.tei-c.org/proposal/standoff/ns" module="standOff">
	  <desc>Groups together annotations, for instance for parallel interpretations of a spoken segment</desc>
	  <classes>
	    <memberOf key="model.annotation"/>
	    <memberOf key="att.global"/>
	    <memberOf key="att.typed"/>
	    <memberOf key="att.notated"/>
	    <memberOf key="att.timed"/>         <?LR Why is this here? —Syd, 2018-10-31 ?>
	    <memberOf key="att.declaring"/>
	  </classes>
	  <content>
	    <sequence>
	      <classRef key="model.headLike" minOccurs="0" maxOccurs="unbounded"/>
	      <alternate minOccurs="1" maxOccurs="unbounded">
		<elementRef key="annotationBlock"/>
		<classRef key="model.noteLike"/>
	      </alternate>
	    </sequence>
	  </content>
	  <remarks>
	    <?LR What? Why is @xml:base used to specify the target,
	         rather than a @target attribute? And why can’t I
		 specify complete absolute URIs if I want?
		 —Syd, 2018-10-31 ?>
	    <p>The global <att>xml:base</att> attribute is used on
	    this element both to specify the target of the annotations
	    and to serve as the base for any target URIs contained by
	    the annotation elements. If this attribute is not
	    supplied, the <gi>listAnnotation</gi> must be embedded
	    within the complete TEI document to which it applies. </p>
	  </remarks>
	</elementSpec>
	
	<!-- The content model for <annotationBlock> is revised to
	     deal with the various anticipated annotation use cases
	     -->
	<elementSpec ident="annotationBlock" mode="change" module="spoken">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	    <!-- allow <annotationBlock> wherever annotated segLike objects can go -->
	    <memberOf key="model.segLike" mode="add"/>
	    <!-- allow indication of notation variants inside -->
	    <memberOf key="att.notated" mode="add"/>
	    <!-- ’tis repeatable and catagorizable: -->
	    <memberOf key="att.typed"/>
	  </classes>
	  <content>
	    <alternate>
	      <classRef key="model.annotation" minOccurs="1" maxOccurs="unbounded"/>
	      <sequence>
		<classRef key="model.OABody" minOccurs="1" maxOccurs="unbounded"/>
		<classRef key="model.OATarget" minOccurs="1" maxOccurs="unbounded"/>
	      </sequence>
	    </alternate>
	  </content>
	  <remarks>
	    <?LR What? Why is @xml:base used to specify the target,
	         rather than a @target attribute? And why can’t I
		 specify complete absolute URIs if I want?
		 —Syd, 2018-10-31 HC, MT, and I think what you should
		 be using here is a prive prefix. But in any case, this
		 seems like abuse of @xml:base. ?>
	    <p>The global <att>xml:base</att> attribute is used on
	    this element both to specify the target of the annotations
	    and to serve as the base for any target URIs contained by
	    the annotation elements. If this attribute is not
	    supplied, the <gi>annotationBlock</gi> must be embedded
	    within the complete TEI document to which it applies. </p>
	  </remarks>
	</elementSpec>

	<classSpec type="model" ident="model.annotation" mode="add" module="standOff">
	  <desc>groups together various element types that may be used
	  to annotate an annotatable segment</desc>
	</classSpec>

	<!-- The following classes are introduced to have an Open
	     Annotation compliant profile for <annotationBlock> -->

	<!-- Open Annotation: Target -->
	<classSpec type="model" ident="model.OATarget" mode="add" module="standOff">
	  <desc>Class implementing the Target component from the Open Annotation model</desc>
	</classSpec>

	<!-- <span> is the basic implementation of the OA model Target component -->
	<elementSpec ident="span" mode="change">
	  <classes mode="change">
	    <memberOf key="model.OATarget" mode="add"/>
	  </classes>
	</elementSpec>

	<!-- Open Annotation: Body -->

	<classSpec type="model" ident="model.OABody" mode="add" module="standOff">
	  <desc>Class implementing the Body component from the Open Annotation model</desc>
	</classSpec>

	<!-- Note-like things are obvious candidates for membership in OA Body -->
	<classSpec ident="model.noteLike" mode="change" type="model">
	  <classes mode="change">
	    <memberOf key="model.OABody" mode="add"/>
	  </classes>
	</classSpec>

	<!-- Adding <person>, <measure>, <date>... to OA Body for the Named Entity use case -->
	<elementSpec ident="person" mode="change">
	  <classes mode="change">
	    <memberOf key="model.OABody" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="measure" mode="change">
	  <classes mode="change">
	    <memberOf key="model.OABody" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="date" mode="change">
	  <classes mode="change">
	    <memberOf key="model.OABody" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="place" mode="change">
	  <classes mode="change">
	    <memberOf key="model.OABody" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="org" mode="change">
	  <classes mode="change">
	    <memberOf key="model.OABody" mode="add"/>
	  </classes>
	</elementSpec>

	<!-- Open Annotation: Annotation -->
	<classSpec type="model" ident="model.OAAnnotation" mode="add" module="standOff">
	  <desc>Class implementing the Annotation component from the Open Annotation model</desc>
	</classSpec>

	<!-- <interp> is the basic implementation of the OA model Annotation component -->
	<elementSpec ident="interp" mode="change">
	  <classes mode="change">
	    <memberOf key="model.OAAnnotation" mode="add"/>
	  </classes>
	</elementSpec>

	<!--       *****       -->
	<!-- Following are existing TEI declarations where we add our new class(es) -->

	<elementSpec ident="castList" mode="change" module="drama">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	  <remarks>
	    <p>The <gi>castList</gi> element is used both to
	    transcribe the source cast list and to record information
	    that about speaking roles in the drama that does not
	    appear in the source cast list. When used to represent
	    the source cast list, the <gi>castList</gi> would
	    typically appear within <gi>front</gi>, although it may
	    also appear occasionally within <gi>body</gi> or
	    <gi>back</gi>. When used to record information about
	    speaking roles that is not in the source cast list (or
	    for some other reason not being transcribed from the
	    source cast list), the <gi>castList</gi> element should
	    be inside an <gi>ldb</gi> element.</p>
	  </remarks>
	</elementSpec>

	<elementSpec ident="u" mode="change" module="spoken">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="seg" mode="change" module="linking">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</elementSpec>

	<classSpec type="model" ident="model.global.meta" mode="change">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</classSpec>

	<classSpec type="model" ident="model.listLike" mode="change">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</classSpec>

	<classSpec type="model" ident="model.entryLike" mode="change">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</classSpec>

	<classSpec type="model" ident="model.biblLike" mode="change">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</classSpec>

	<elementSpec ident="listChange" mode="change" module="header">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</elementSpec>
	
	<!--graph, listgraph forest, -->

	<elementSpec ident="graph" mode="change">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="forest" mode="change">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="listForest" mode="change">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="tree" mode="change">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="eTree" mode="change">
	  <classes mode="change">
	    <memberOf key="model.annotation" mode="add"/>
	  </classes>
	</elementSpec>

	<elementSpec ident="zone" mode="change">
	  <classes mode="change">
	    <memberOf mode="add" key="model.annotation"/>
	  </classes>
	</elementSpec>

      </schemaSpec>
    </back>
  </text>
</TEI>
